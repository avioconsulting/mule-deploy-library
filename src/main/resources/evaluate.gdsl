def ctx = context(scriptScope: 'deploySpec.groovy')
contributor([ctx]) {
    method name: 'muleDeploy',
           params: [
                   closure: Closure.name
           ]
}

def workerTypeContext = context(ctype: 'com.avioconsulting.mule.deployment.api.models.WorkerTypes')
contributor([workerTypeContext]) {
    // Properties can't be upper cased so we make them lower case and then the DSL code makes ENUMs case insensitive
    #foreach($enumValue in $workerTypes)
        property name: '$enumValue',
                 type: 'com.avioconsulting.mule.deployment.api.models.WorkerTypes'
    #end
}

def awsRegionContext = context(ctype: 'com.avioconsulting.mule.deployment.api.models.AwsRegions')
contributor([awsRegionContext]) {
    // Properties can't be upper cased so we make them lower case and then the DSL code makes ENUMs case insensitive
    #foreach($enumValue in $awsRegions)
        property name: '$enumValue',
                 type: 'com.avioconsulting.mule.deployment.api.models.AwsRegions'
    #end
}

def closureScopeContext = context(scope: closureScope())
contributor([closureScopeContext]) {
    def call = enclosingCall('muleDeploy')

    if (call) {
        method name: 'cloudHubApplication',
               type: 'void',
               params: [
                       closure: Closure.name
               ]
    }
    call = enclosingCall('cloudHubApplication')
    if (call) {
        method name: 'environment',
               type: 'void',
               params: [
                       environmentName: String.name
               ]
        method name: 'applicationName',
               type: 'void',
               params: [
                       appName: String.name
               ]
        method name: 'workerSpecs',
               type: 'void',
               params: [
                       closure: Closure.name
               ]
        method name: 'file',
               type: 'void',
               params: [
                       fileName: String.name
               ]
        method name: 'cryptoKey',
               type: 'void',
               params: [
                       cryptoKey: String.name
               ]
        method name: 'autoDiscovery',
               type: 'void',
               params: [
                       closure: Closure.name
               ]
        method name: 'cloudHubAppPrefix',
               type: 'void',
               params: [
                       prefix: String.name
               ]
        method name: 'appProperties',
               type: 'void',
               params: [
                       props: Map.name
               ]
        method name: 'otherCloudHubProperties',
               type: 'void',
               params: [
                       props: Map.name
               ]
    }
    call = enclosingCall('workerSpecs')
    if (call) {
        method name: 'muleVersion',
               type: 'void',
               params: [
                       version: String.name
               ]
        method name: 'usePersistentQueues',
               type: 'void',
               params: [
                       enabled: Boolean.name
               ]
        method name: 'workerType',
               type: 'void',
               params: [
                       workerType: 'com.avioconsulting.mule.deployment.api.models.WorkerTypes'
               ]
        method name: 'workerCount',
               type: 'void',
               params: [
                       count: Integer.name
               ]
        method name: 'awsRegion',
               type: 'void',
               params: [
                       region: 'com.avioconsulting.mule.deployment.api.models.AwsRegions'
               ]
        // see above for where we "create ENUMs"
        method name: 'WorkerTypes',
               type: 'com.avioconsulting.mule.deployment.api.models.WorkerTypes'
        method name: 'AwsRegions',
               type: 'com.avioconsulting.mule.deployment.api.models.AwsRegions'
    }
    call = enclosingCall('autoDiscovery')
    if (call) {
        method name: 'clientId',
               type: 'void',
               params: [
                       clientId: String.name
               ]
        method name: 'clientSecret',
               type: 'void',
               params: [
                       clientSecret: String.name
               ]
    }
}
